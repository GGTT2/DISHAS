<?php
namespace TAMAS\AstroBundle\Repository;

use TAMAS\AstroBundle\DISHASToolbox\Table\TAMASListTableTemplate;

/**
 * JournalRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JournalRepository extends \Doctrine\ORM\EntityRepository
{

    /* _____________________________________________________________________ add data ______________________________________ */

    /**
     * prepareListForForm
     *
     * This method is used when the current entity is linked to a parent form.
     * It returns a custom DQL query builder (not the result!) which will be queried from the formType and findForAutofill.
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function prepareListForForm()
    {
        return $this->createQueryBuilder('j')->orderBy('j.journalTitle', 'ASC');
    }

    /**
     * findForAutofill
     *
     * This method is triggered in the parent entity form type by ajax. It returns the getLabel list of object of the entity class.
     *
     * @return array (each value of the array contains an id and a title which are used in the ajax request to populate the select choice of the form such as <selec><option = "id">title</option>).
     */
    public function findForAutofill()
    {
        $entities = $this->prepareListForForm()
            ->getQuery()
            ->getResult();
        $answers = array();
        foreach ($entities as $entity) {
            $answers[] = [
                "id" => $entity->getId(),
                "title" => (string) $entity
            ];
        }
        return $answers;
    }

    /* ____________________________________________________________________ list data ___________________________________________________ */

    /**
     * getList
     *
     * This method is roughly equivalent to findAll(), but it lowers the number of queries to the database.
     *
     *
     * @return array of object journals
     */
    public function getList()
    {
        return $this->createQueryBuilder('j')
            ->orderBy('j.id')
            ->getQuery()
            ->getResult();
    }

    /**
     * getObjectList
     *
     * This function generates the specs for listing a given collection of editedTexts: both the list of data (pre-treated for the front library) and the spec of the table (adapted to the front library).
     *
     * @param array $journals
     *            : collection of all the journals
     * @return array : containing the list of fields and the list of data ;
     */
    public function getObjectList($journals, \TAMAS\AstroBundle\DISHASToolbox\Table\TAMASListColumnSpec $spec)
    {
        $fieldList = [
            new TAMASListTableTemplate('id', '#'),
            new TAMASListTableTemplate('title', 'Title'),
            new TAMASListTableTemplate('created', 'Created', [] , 'adminInfo'),
            new TAMASListTableTemplate('updated', 'Updated', [], 'adminInfo'),
            new TAMASListTableTemplate('buttons', '', [], 'editDelete')
        ];
       
        $data = $journals;
        if ($journals === null) {
            $data = $this->getList();
        }
        $refinedData = [];
        foreach ($data as $d) {
            $created = '';
            $updated = '';
            $createdBy = [];
            $updatedBy = [];
            $title = $d->getJournalTitle();
            if ($d->getCreated()) {
                $created = $d->getCreated()->format('d/m/y');
            }
            if ($d->getUpdated()) {
                $updated = $d->getUpdated()->format('d/m/y');
            }
            if ($d->getCreatedBy()) {
                $createdBy = [
                    'id' => $d->getCreatedBy()->getId(),
                    'username' => $d->getCreatedBy()->getUserName()
                ];
            }
            if ($d->getUpdatedBy()) {
                $updatedBy = [
                    'id' => $d->getUpdatedBy()->getId(),
                    'username' => $d->getUpdatedBy()->getUsername()
                ];
            }
            $refinedData[] = [
                'title' => $title,
                'created' => $created,
                'updated' => $updated,
                'createdBy' => $createdBy,
                'updatedBy' => $updatedBy,
                'id' => $d->getId()
            ];
        }
        return [
            'fieldList' => $fieldList,
            'data' => $refinedData
        ];
    }

    /**
     * This function is temporary used for the ajax call of the list of entity.
     * To be improved in the merging of list logic //TODO
     *
     * @param {array} of $journal objects
     * @return {array} of $journal objects
     */
    public function getFormatedList($journals = null)
    {
        if ($journals) {
            return $journals;
        }
        return [];
    }

    /**
     * getDependencies
     *
     * This method is part of the process of forcing deletion of an object.
     * We need to know what are the related fields that are linked to journal (in order to unlink it before deleting it)
     *
     * @return array
     */
    public function getDependancies()
    {
        return [
            \TAMAS\AstroBundle\Entity\SecondarySource::class => [
                'journal' => [
                    'unlinkMethod' => 'setJournal',
                    'oneToMany' => true
                ]
            ]
        ];
    }

    /* _____________________________________________________________________ Draft ________________________________________ */

/**
 * findForAutocomplete
 *
 * This function is used for autocompletion purpose. It gives an array of answers that start with the entered value in the form.
 *
 * @param string $term
 * @return array
 */
    /*
     * public function findForAutocomplete($term) {
     *
     * $queryResult = $this->createQueryBuilder('j')
     * ->select('j.journalTitle, j.id')
     * ->where('j.journalTitle LIKE :term')
     * ->setParameter('term', $term . '%')
     * ->orderBy('j.journalTitle')
     * ->getQuery()
     * ->getResult();
     * $arrayResult = [];
     * foreach ($queryResult as $result) {
     * $arrayResult[] = ['value' => $result['journalTitle'], 'label' => $result['journalTitle'], 'id' => $result['id']];
     * }
     * return $arrayResult;
     * }
     */
}
