<?php

namespace TAMAS\AstroBundle\Repository;

/**
 * DefinitionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DefinitionRepository extends \Doctrine\ORM\EntityRepository {

    /**
     * Get a dictionary of entity definition by entity key
     * @return array[]
     */
    public function getObjectAttributeByEntityName() {
        $objects = $this->findAll();
        $objectByEntityName = [];
        foreach ($objects as $object) {
            if ($object->getObjectEntityName()) {
                $objectByEntityName[$object->getObjectEntityName()] = $object;
            } elseif ($object->getObjectUserInterfaceName()) {
                $objectByEntityName[$object->getObjectUserInterfaceName()] = $object;
            }
        }
        return $objectByEntityName;
    }

    /**
     * This method returns the ObjectUserInterfaceName of the entity given as parameter
     * Plural and indefinite article can be added
     * @param string $entityName
     * @param bool $isPlural
     * @param bool $hasDeterminer
     * @return mixed
     */
    public function getInterfaceName($entityName, $isPlural = false, $hasDeterminer = false)
    {
        $entities = [
            "astronomicalObject" => 1,
            "astronomicalTable" => 2,
            "editedText" => 3,
            "formulaDefinition" => 32,
            "historian" => 4,
            "historicalActor" => 5,
            "journal" => 6,
            "language" => 7,
            "library" => 8,
            "mathematicalParameter" => 9,
            "numberUnit" => 10,
            "originalText" => 11,
            "parameterFeature" => 12,
            "parameterFormat" => 13,
            "parameterGroup" => 14,
            "parameterSet" => 15,
            "parameterType" => 16,
            "parameterUnit" => 17,
            "parameterValue" => 18,
            "place" => 19,
            "primarySource" => 20,
            "script" => 21,
            "secondarySource" => 22,
            "tableContent" => 23,
            "tableType" => 24,
            "typeOfNumber" => 25,
            "work" => 26
        ];

        $definition = $this->find($entities[$entityName]);

        return $definition->getUserInterfaceName($isPlural, $hasDeterminer);
    }
}
